@Service用于标注业务层组件
@Controller用于标注控制层组件（如struts中的action)
@Repository用于标注数据访问组件，即DAO组件
@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注



================================
js产生精度误差
20.01/100=0.20010000000000003
自我总结产生原因：js只有数值（整数和小数）只有一个类型number。为了方便存储都是进行二进制存储。（节省资源）
小数→二进制→十进制。就产生了误差。

参考：https://github.com/camsong/blog/issues/9

===================================
JAVA中泛型是不变的，可有时需要实现逆变与协变，怎么办呢？这时就需要通配符?。

<? extends E>实现了泛型的协变，比如：​​​​​​​

List<? extends Food> foodList = new ArrayList<>();
List<Apple> appleList = new ArrayList<>();
foodList = appleList; // ok 协变

foodList.add(new Beef()); // 错误 不能执行添加null 以外的操作
foodList.add(new Food());// 错误，同上，
foodlist.add(new Apple()); // 错误，同上

Food food = foodList.get(index); //ok, 把子类引用赋值给父类显然是可以的

<？ extends Food>指明了上界，即表示了集合中存放的对象是 Food 或者Food 的子类，因此foodList 就表示了一个存放 Food 或者Food 的子类的集合，appleList 集合就是一个存放 Food 的子类 Apple 的集合， 因此可以把 appleList 赋值给 foodList ,但是不能对foodList 添加除null 以外的任何对象。为什么不能添加呢？其实很简单，如果可以允许的话，那么foodList 就可以添加Food 或者Food 的子类型，那么上面代码中在foodList = appleList; 赋值后，执行foodList.add(new Beef()); 操作就会导致给 appleList 里面添加了一个Beef 对象，显然这样是不对的。


switch  case   .
case语句中少写了break，编译不会报错，但是会一直执行之后所有case条件下的语句而不再判断
能用于switch判断的类型有：byte、short、int、char（JDK1.6），还有枚举类型，但是在JDK1.7后添加了对String类型的判断

char(n)  定长  索引效率高 程序里面使用trim去除多余的空白
varchar(n)  变长  效率没char高 灵活

==================================================================================
计算机存储数据机制：正数存储的二进制原码,负数存储的是二进制的补码。 补码是负数的绝对值反码加1。
byte类型的数字要&0xff再赋值给int类型，其本质原因就是想保持二进制补码的一致性
0x代表16进制。0xff    1111 1111

反码的表示方法是:正数的反码是其本身；负数的反码是在其原码的基础上， 符号位不变，其余各个位取反。
补码的表示方法是:正数的补码就是其本身；负数的补码是在其原码的基础上， 符号位不变， 其余各位取反， 最后+1。 (即在反码的基础上+1)


=============================================
https://blog.csdn.net/CrankZ/article/details/82874158

连接池
不使用数据库连接池的步骤：

    1、TCP建立连接的三次握手
    2、MySQL认证的三次握手
    3、真正的SQL执行
    4、MySQL的关闭
    5、TCP的四次握手关闭
    为了执行一条SQL，却多了非常多我们不关心的网络交互。

    优点：
        实现简单
    缺点：
       1、网络IO较多
       2、数据库的负载较高
       3、响应时间较长及QPS较低
       4、应用频繁的创建连接和关闭连接，导致临时对象较多，GC频繁
       5、在关闭连接后，会出现大量TIME_WAIT 的TCP状态（在2个MSL之后关闭）


使用数据库连接池的步骤：

        1、第一次访问的时候，需要建立连接。 但是之后的访问，均会复用之前创建的连接，直接执行SQL语句

优点：
   1、较少了网络开销
   2、系统的性能会有一个实质的提升
   3、没了麻烦的TIME_WAIT状态
